<div class="container-fluid my-5 mx-0 px-0">
  {{#if error}}

  <div class="container">
    <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-lg">
      <div class="col-lg-8 p-3 p-lg-5 pt-lg-3">
        <h1 class="display-4 fw-bold lh-1">Error</h1>
        <p class="lead">There was an error processing your request. Please try again later.</p>
        <div class="d-grid gap-2 d-md-flex justify-content-md-start mb-4 mb-lg-3">
          <a href="/compare" class="btn btn-primary btn-lg px-4 me-md-2 fw-bold">Return to the comparison select screen</a>
        </div>
      </div>
    </div>
  </div>

  {{else}}

  <div id="data" class="d-none">
    {{#each data}}

    <div class="college-data">
      {{#each applicationsByYear}}

      <div class="admissions-cycle">
        <p class="year">{{year}}</p>
        <p class="totalApplied">{{totalApplied}}</p>
        <p class="totalAccepted">{{totalAccepted}}</p>
        <p class="totalEnrolled">{{totalEnrolled}}</p>
      </div>

      {{/each}}
      <p>{{name}}</p>
    </div>

    {{/each}}
  </div>
  
  <nav>
    <div class="nav nav-tabs nav-fill mx-0 px-0" id="charts" role="tablist">
      <button class="nav-link active" id="nav-total-applied" data-bs-toggle="tab" data-bs-target="#total-applied" type="button" role="tab" aria-controls="total-applied" aria-selected="true">Total Applied</button>
      <button class="nav-link" id="nav-total-accepted" data-bs-toggle="tab" data-bs-target="#total-accepted" type="button" role="tab" aria-controls="total-accepted" aria-selected="false">Total Accepted</button>
      <button class="nav-link" id="nav-total-enrolled" data-bs-toggle="tab" data-bs-target="#total-enrolled" type="button" role="tab" aria-controls="total-enrolled" aria-selected="false">Total Enrolled</button>
    </div>
  </nav>
  <div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade show active" id="total-applied" role="tabpanel" aria-labelledby="nav-total-applied">
      <div class="container">
        <h3 class="text-center mt-3">Applied Statistics Comparison</h3>
        <canvas id="chart-total-applied" width="300"></canvas>
      </div>
    </div>
    <div class="tab-pane fade" id="total-accepted" role="tabpanel" aria-labelledby="nav-total-accepted">
      <div class="container">
        <h3 class="text-center mt-3">Accepted Statistics Comparison</h3>
        <canvas id="chart-total-accepted" width="300"></canvas>
      </div>
    </div>
    <div class="tab-pane fade" id="total-enrolled" role="tabpanel" aria-labelledby="nav-total-enrolled">
      <div class="container">
        <h3 class="text-center mt-3">Enrolled Statistics Comparison</h3>
        <canvas id="chart-total-enrolled" width="300"></canvas>
      </div>
    </div>
  </div>


  {{/if}}
</div>

<script>
  // Array to store data
  let data = [];

  //Ensuring that all college data lists start with the same year
  let firstYear = 9999;
  document.querySelectorAll('.admissions-cycle:first-child > .year').forEach(year => {
    firstYear = Math.min(firstYear, Number(year.innerHTML));
  });

  // Using HTML selectors to grab the data
  document.querySelectorAll('.college-data').forEach(college => {
    let years = [];
    let totalApplied = [];
    let totalAccepted = [];
    let totalEnrolled = [];

    college.querySelectorAll(':scope > .admissions-cycle').forEach(admissionsCycle => {
      const year = Number(admissionsCycle.querySelector(':scope > .year').innerHTML);
      if (year.length === 0) {
        // Correcting for a gap between the first overall year and the first year for college data
        for (let i = 0; i < year - firstYear; i++) {
          years.push(firstYear + i);
          totalApplied.push(0);
          totalAccepted.push(0);
          totalEnrolled.push(0);
        }
      } else {
        // Correcting for gap years of college data
        let prevYear = year[year.length - 1] + 1;
        while (prevYear < year) {
          years.push(prevYear);
          totalApplied.push(0);
          totalAccepted.push(0);
          totalEnrolled.push(0);
          prevYear++;
        }
      }
      years.push(Number(admissionsCycle.querySelector(':scope > .year').innerHTML));
      totalApplied.push(Number(admissionsCycle.querySelector(':scope > .totalApplied').innerHTML));
      totalAccepted.push(Number(admissionsCycle.querySelector(':scope > .totalAccepted').innerHTML));
      totalEnrolled.push(Number(admissionsCycle.querySelector(':scope > .totalEnrolled').innerHTML));
    });

    // Adding the individual college's data to the overall array
    data.push({
      name: college.querySelector(':scope > p').innerHTML,
      totalApplied: totalApplied,
      totalAccepted: totalAccepted,
      totalEnrolled: totalEnrolled,
      years: years
    });
  });

  // Getting random colors for the graphs
  const colors = randomColor({
    count: data.length,
    luminosity: 'dark',
    format: 'rgb'
  })

  // Initial chart size adjustment
  setCanvasHeight();

  // Creating the 'Total Applied' chart
  let totalAppliedDatasets = [];
  for (let i = 0; i < data.length; i++) {
    totalAppliedDatasets.push({
      label: data[i].name,
      data: data[i].totalApplied,
      fill: false,
      borderColor: colors[i],
      tension: 0.1
    });
  }
  let totalAppliedConfig = {
    type: 'line',
    data: {
      labels: data[0].years,
      datasets: totalAppliedDatasets
    },
    options: {
      resizeDelay: 250
    }
  }
  let totalAppliedChart = new Chart(document.getElementById('chart-total-applied'), totalAppliedConfig);

  // Creating the 'Total Accepted' chart
  let totalAcceptedDatasets = [];
  for (let i = 0; i < data.length; i++) {
    totalAcceptedDatasets.push({
      label: data[i].name,
      data: data[i].totalAccepted,
      fill: false,
      borderColor: colors[i],
      tension: 0.1
    });
  }
  let totalAcceptedConfig = {
    type: 'line',
    data: {
      labels: data[0].years,
      datasets: totalAcceptedDatasets
    },
    options: {
      resizeDelay: 250
    }
  }
  let totalAcceptedChart = new Chart(document.getElementById('chart-total-accepted'), totalAcceptedConfig);

  // Creating the 'Total Enrolled' chart
  let totalEnrolledDatasets = [];
  for (let i = 0; i < data.length; i++) {
    totalEnrolledDatasets.push({
      label: data[i].name,
      data: data[i].totalEnrolled,
      fill: false,
      borderColor: colors[i],
      tension: 0.1
    });
  }
  let totalEnrolledConfig = {
    type: 'line',
    data: {
      labels: data[0].years,
      datasets: totalEnrolledDatasets
    },
    options: {
      resizeDelay: 250
    }
  }
  let totalEnrolledChart = new Chart(document.getElementById('chart-total-enrolled'), totalEnrolledConfig);

  // Sets the new chart sizes when the screen is resized
  window.addEventListener('resize', function() {
    totalAppliedChart.destroy();
    totalAcceptedChart.destroy();
    totalEnrolledChart.destroy();
    setCanvasHeight();
    totalAppliedChart = new Chart(document.getElementById('chart-total-applied'), totalAppliedConfig);
    totalAcceptedChart = new Chart(document.getElementById('chart-total-accepted'), totalAcceptedConfig);
    totalEnrolledChart = new Chart(document.getElementById('chart-total-enrolled'), totalEnrolledConfig);
  });

  // Specifies the new chart sizes when the screen is resized
  function setCanvasHeight() {
    switch (true) {
      case (window.screen.width < 450): {
        document.getElementById('chart-total-applied').height = 450;
        document.getElementById('chart-total-accepted').height = 450;
        document.getElementById('chart-total-enrolled').height = 450;
        break;
      }
      case (window.screen.width < 768): {
        document.getElementById('chart-total-applied').height = 300;
        document.getElementById('chart-total-accepted').height = 300;
        document.getElementById('chart-total-enrolled').height = 300;
        break;
      }
      case (window.screen.width < 992): {
        document.getElementById('chart-total-applied').height = 250;
        document.getElementById('chart-total-accepted').height = 250;
        document.getElementById('chart-total-enrolled').height = 250;
        break;
      }
      case (window.screen.width < 1200): {
        document.getElementById('chart-total-applied').height = 200;
        document.getElementById('chart-total-accepted').height = 200;
        document.getElementById('chart-total-enrolled').height = 200;
        break;
      }
      case (window.screen.width < 1400): {
        document.getElementById('chart-total-applied').height = 150;
        document.getElementById('chart-total-accepted').height = 150;
        document.getElementById('chart-total-enrolled').height = 150;
        break;
      }
      default: {
        document.getElementById('chart-total-applied').height = 100;
        document.getElementById('chart-total-accepted').height = 100;
        document.getElementById('chart-total-enrolled').height = 100;
      }
    }
  }
</script>